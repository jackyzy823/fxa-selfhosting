#! THIS FILE USING YTT(https://github.com/k14s/ytt/) FORMAT
#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("@ytt:struct", "struct")
version: "3.7"
services:
  #! #! #! #! #! #! #! #! #! #! #! #! #! #! #!  dependecies #! #! #! #! #! #! #! #! #! #! #! #! #! #! 
  mysqldb: #!  used by fxa-profile-server fxa-auth-db-mysql pushbox syncserver
  #! [TODO]: set a password
    image: mysql/mysql-server:5.6
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_ROOT_HOST=%
    expose:
      - "3306" 
    volumes:
      - #@ "{persistencepath}/mysql_data:/var/lib/mysql/".format(persistencepath=data.values.persistencepath)
      - ./_init/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      #@ if data.values.option.sync.neverexpire == True:
      - ./_init/mysql/syncserver_ttl.sql:/docker-entrypoint-initdb.d/syncserver_ttl.sql:ro
      #@ end
       #!    -> Create database if not exists pushbox;
       #!         -> add a scheduler to cleanup pushbox
       #!    -> create database if not exists sync;
    #@ if data.values.debug.deps_logs == False:
    logging: #!  do not show logs
      driver: "json-file"
    #@ end
    restart: unless-stopped
    command: "--event-scheduler=ON"

  redis: #! used by fxa-email-service  fxa-profile-server(has prefixkey) fxa-content-server (seem not used?) fxa-auth-server(has prefix key)
    image: redis
    expose:
      - "6379"
    #@ if data.values.debug.deps_logs == False:
    logging: #!  do not show logs
      driver: "json-file"
    #@ end
    restart: unless-stopped

  #! #! #! #! #! #!  internal dependencies
  browseridverifier.local: #! used by syncserver and fxa-auth-server's oauth-server
  #!  uses fxa-auth-server (issuer)
  #!  a tld-like name is required for fxa-auth-server config's url type check
    image: #@ "mozilla/fxa-mono:{version}".format(version=data.values.fxa_version or "latest")
    working_dir: "/fxa/packages/browserid-verifier"
    expose:
      - "5050"
    environment:
      - PORT=5050
      - IP_ADDRESS=0.0.0.0
      - FORCE_INSECURE_LOOKUP_OVER_HTTP=false
      - HTTP_TIMEOUT=60
    restart: unless-stopped
    #! to override "npm" entrypoint and "start" command
    entrypoint: "node"
    command: "server.js"

  syncserver:  #! used by fxa-content-server 
  #! uses browserid-verifier / mysqldb
    #!  build:  #! it seems that mozilla/syncserver already has PyMySQL
    #!    dockerfile: Dockerfile_syncserver_mysql
    #!    #!  FROM mozilla/syncserver
    #!    #!  RUN pip install --upgrade PyMySQL==0.9.3
    #!    #! 
    #!    context: /dev/null
    #! since introduce of SYNCSERVER_OAUTH_VERIFIER , a force docker image update is required!
    image: mozilla/syncserver
    expose:
      - "5000"
    environment:
      #! [TODO][RETHINK] what should we wait a  nginx:443 or nginx:80 or nginx_listener address(what if 0.0.0.0) or more outside?? For now we choose 443/80 inner docker network
      #! - WAIT_HOSTS=mysqldb:3306
      - #@ "WAIT_HOSTS=mysqldb:3306,nginx:{port},fxa-auth-server:9000".format(port=443 if  data.values.nginx.ssl == True  else 80)
      - WAIT_HOSTS_TIMEOUT=120
      - #@ "SYNCSERVER_PUBLIC_URL=https://{sync}.{domain_name}".format(sync=data.values.domain.sync, domain_name=data.values.domain.name)
      - SYNCSERVER_BROWSERID_VERIFIER=http://browseridverifier.local:5050
      #!  auto generate via syncserver / ?? use for  syncserver<-> tokenserver??
      #!  secret is generated in code. see syncserver/_init__.py:57
      #!  - SYNCSERVER_SECRET=${FXAHOST_SYNCSERVER_SECRET:=`head /dev/urandom | tr -dc A-Za-z0-9 | head -c 20`}  
      - SYNCSERVER_SQLURI=mysql+pymysql://root@mysqldb/sync  #! databasename: sync
      #!  - SYNCSERVER_SQLURI=sqlite:////tmp/syncserver.db
      - SYNCSERVER_BATCH_UPLOAD_ENABLED=true
      - SYNCSERVER_FORCE_WSGI_ENVIRON=true #!  because we have nginx proxy it 
      - PORT=5000
      #! replace SYNCSERVER_IDENTITY_PROVIDER with  SYNCSERVER_OAUTH_VERIFIER see https://github.com/mozilla-services/syncserver/pull/209
      #! and https://github.com/mozilla/fxa/pull/4689
      #! for fenix and firefox (in future to replace broserid) to use sync with oauth (verify by self fxa)
      #! update : however it still needs a visit to oauth server when init. see: https://github.com/mozilla-services/tokenserver/blob/942241b97c44defa77898e2432775db62a5da69e/tokenserver/verifiers.py#L207
      - #@ "SYNCSERVER_OAUTH_VERIFIER=https://{oauth}.{domain_name}".format(oauth=data.values.domain.oauth,domain_name=data.values.domain.name)
    depends_on:
      - mysqldb
      - fxa-auth-server #! however it still needs a visit to oauth server
    volumes:
      - ./wait:/wait
    entrypoint: sh -c "/wait && /usr/bin/dumb-init /app/docker-entrypoint.sh server"
    #!  entrypoint: sh -c "pip install --upgrade  PyMySQL==0.9.3 && /wait && /usr/bin/dumb-init /app/docker-entrypoint.sh server" if pymysql not installed?
    #!  command: "server"
    restart: unless-stopped

  pushbox.local: #!  used by fxa-auth-server 
  #!  a tld-like name is required for fxa-auth-server config's url type check
  #!  note manually delete old data? -> Done via _init/mysql/init.sql -> create event
  #!  see:  https://github.com/mozilla-services/pushbox#! database
  #!  DELETE from pushboxv1 where TTL < unix_timestamp();
    image: mozilla/pushbox #!  if latest not work please specific :0.3.0 (last tested version)
    expose:
      - "8002"
    environment:
      - ROCKET_ENV=prod

      - ROCKET_PORT=8002
      #!  should same as fxa-auth-server -> pushbox->key
      - #@ "ROCKET_SERVER_TOKEN={pushboxkey}".format(pushboxkey=data.values.secrets.pushboxkey)
      - ROCKET_DATABASE_URL=mysql://root@mysqldb/pushbox
      - WAIT_HOSTS=mysqldb:3306
      - WAIT_HOSTS_TIMEOUT=120
    depends_on:
      - mysqldb
    volumes:
      - ./wait:/wait
    command: sh -c "/wait && /app/bin/pushbox"
    restart: unless-stopped

  #! #! #! #! #! #! #! #! #! #! #! #! #! #! #! #! #! #! 
  fxa-auth-db-mysql:
    image: #@ "mozilla/fxa-mono:{version}".format(version=data.values.fxa_version or "latest")
    working_dir: "/fxa/packages/fxa-auth-db-mysql"
    expose:
      - "8000"
    depends_on:
      - mysqldb
    volumes:
      - ./wait:/wait
    command: sh -c "/wait && node ./bin/db_patcher.js > /dev/null && node ./bin/server.js"
    environment:
      - WAIT_HOSTS=mysqldb:3306
      - WAIT_HOSTS_TIMEOUT=120
      #! see fxa-auth-db-mysql/config/config.js
      - MYSQL_HOST=mysqldb
      #!  if MYSQL_PASSWORD MYSQL_USER MYSQL_PORT
      - MYSQL_SLAVE_HOST=mysqldb
      - ENABLE_PRUNING=true #!  to cleanup db
      - LOG_LEVEL=WARN
      - HOST=0.0.0.0 #! for all
    restart: unless-stopped

#@ if data.values.mail.type == "localhelper":
  #! #! for non-send-mail-just-check-code-in-log
  fxa-auth-local-mail-helper:
  #! [TODO] mails in const users ={} should be deleted 
    image: #@ "mozilla/fxa-mono:{version}".format(version=data.values.fxa_version or "latest")
    working_dir: "/fxa/packages/fxa-auth-server/dist/fxa-auth-server/"
    expose:
      - "9999"  #! smtp_port do not affect this
      #!  so you can curl http://127.0.0.1:9001/mail/<your-mail-addr-before-at-mark>  <- connection will not close until get one
      #!  or curl -X DELETE  http://127.0.0.1:9001/mail/<your-mail-addr-before-at-mark>  
    ports:
      - #@ "{}:9001".format(data.values.mail.localhelper.web)
    environment:
      - NODE_ENV=dev #! #!  to avoid missing pushbox.key and etc...in fxa-auth-server\config\index.js line 1739
      - SMTP_PORT=9999  #! #! port for smtp server receive mail!!!
      #!  check mail via API
      - MAILER_HOST=0.0.0.0
      - MAILER_PORT=9001 #!  need ports to outside! for GET /mail/your-mail-address!
    #! becasue  after v1.173.0 docker image base changes and npm will always fail because of lacking of python for nodegyp to build unixgram package.
    command:  sh -c "npm i -D mailparser simplesmtp ; cp ../../test/mail_helper.js test/ && node test/mail_helper.js"
    restart: unless-stopped
#@ elif  data.values.mail.type == "localrelay":
  #!  if your hosting allows you send email via smtp/25
  exim-sender:
    image: elsdoerfer/exim-sender
    environment:
      - ALLOWED_HOSTS="192.168.0.0/16;172.16.0.0/12;10.0.0.0/8"
      - #@ "PRIMARY_HOST={}".format(data.values.domain.name)
    expose:
      - "25"
#@ end

  fxa-auth-server:
    image: #@ "mozilla/fxa-mono:{version}".format(version=data.values.fxa_version or "latest")
    working_dir: "/fxa/packages/fxa-auth-server/dist/fxa-auth-server"
    expose:
      - "9000"
    depends_on:
      - fxa-auth-db-mysql
      - redis
    volumes:
      - ./wait:/wait
      #!  since i do not know which  client_id is real use 
      #!  so i add all client_ids from dev.json
      #!  98e6508e88680e1a -> settings
      #!  5882386c6d801776 -> firefox and sync? <- but i have not seen it in  enabledClientIds?  because it is not a publicClient ?
      #!  
      #!  see lib/oauth/db/ -> preClients ?
      #@ if data.values.debug.auth_server_preverifed == True:
      - ./_init/auth/oauthserver-prod.json:/fxa/packages/fxa-auth-server/dist/fxa-auth-server/config/test.json
      #@ else:
      - ./_init/auth/oauthserver-prod.json:/fxa/packages/fxa-auth-server/dist/fxa-auth-server/config/prod.json
      #@ end
    environment:
      #@ if data.values.debug.auth_server_preverifed == True:
      - NODE_ENV=test
      #@ end
      #!  since we do not use sns ,we make this prod

      #! these two pairs?
      #! OAUTH_SERVER_SECRET_KEY = oauth.secretKey default  megaz0rd dev.json: not found
      #! AUTH_SERVER_SECRETS = oauthServer.authServerSecrets  default: [],  dev.json ["megaz0rd", "whatever"]

      #! these two pairs?
      #! OAUTH_SERVER_SECRETS = oauth.jwtSecretKeys default ['megaz0rd']  dev.json:   ["megaz0rd"]
      #! AUTH_SERVER_SHARED_SECRET = oauthServer.auth.jwtSecretKey  default  megaz0rd dev.json not found
      - #@ "OAUTH_SERVER_SECRET_KEY={authsecret}".format(authsecret=data.values.secrets.authsecret)
      - #@ "OAUTH_SERVER_SECRETS={authsecret}".format(authsecret=data.values.secrets.authsecret)
      - #@ "AUTH_SERVER_SHARED_SECRET={authsecret}".format(authsecret=data.values.secrets.authsecret)
      - #@ "AUTH_SERVER_SECRETS={authsecret},realwhatever".format(authsecret=data.values.secrets.authsecret)

      #!  - JWT_ACCESS_TOKENS_ENABLED=false
      #!  - JWT_ACCESS_TOKENS_ENABLED_CLIENT_IDS=98e6508e88680e1a
      
      #!  just pass config check , we have no  support 
      - #@ "SUPPORT_PANEL_AUTH_SECRET_BEARER_TOKEN={supportpanel_authsecret_bearertoken}".format(supportpanel_authsecret_bearertoken=data.values.secrets.supportpanel_authsecret_bearertoken)
      #!  same as profile server AUTH_SECRET_BEARER_TOKEN
      - #@ "PROFILE_SERVER_AUTH_SECRET_BEARER_TOKEN={profileserver_authsecret_bearertoken}".format(profileserver_authsecret_bearertoken=data.values.secrets.profileserver_authsecret_bearertoken)
      #! same as content-server 's
      - #@ "FLOW_ID_KEY={flowidkey}".format(flowidkey=data.values.secrets.flowidkey)
      - REDIS_HOST=redis
      - ACCESS_TOKEN_REDIS_HOST=redis #!  new in v1.160.0
      
      - REFRESH_TOKEN_REDIS_HOST=redis #! new in v1.178.0

      #!  sqs for 3rd rp
      #!  sns for profile/sync/pushbox


      #!  if (conf.has('snsTopicEndpoint') && conf.get('env') !== 'dev') {
      #!    throw new Error('snsTopicEndpoint is only allowed in dev env');
      #!  }
      - SNS_TOPIC_ARN=disabled

      - SMS_ENABLED=false
      - SMS_ENABLE_BUDGET_CHECKS=false
      #!   'Address:port of the memcached server (or `none` to disable memcached)',
      - MEMCACHE_METRICS_CONTEXT_ADDRESS=none  

      #!  for oauth
      - DB=mysql 
      - MYSQL_HOST=mysqldb

      - HTTPDB_URL=http://fxa-auth-db-mysql:8000 #!  
      - IP_ADDRESS=0.0.0.0
      #!  
      - SIGNIN_UNBLOCK_FORCED_EMAILS=^block.*@restmail\\.net$$
      - SIGNIN_CONFIRMATION_ENABLED=true
      - SIGNIN_CONFIRMATION_FORCE_EMAIL_REGEX=^sync.*@restmail\\.net$$
      #!  SIGNIN_CONFIRMATION_SKIP_FOR_NEW_ACCOUNTS -> do not need sigincode?
      #!  SIGNIN_CONFIRMATION_SKIP_FOR_EMAIL_ADDRESS -> or this?
      
      - #@ "ISSUER={auth}.{domain_name}".format(auth=data.values.domain.auth,domain_name=data.values.domain.name)
      - #@ "PUBLIC_URL=https://{auth}.{domain_name}".format(auth=data.values.domain.auth,domain_name=data.values.domain.name)
      - #@ "OAUTH_URL=https://{oauth}.{domain_name}".format(oauth=data.values.domain.oauth,domain_name=data.values.domain.name)
      - #@ "AUTH_SERVER_URL=https://{auth}.{domain_name}".format(auth=data.values.domain.auth,domain_name=data.values.domain.name)
      #! for oauthserver's GET /authorization to tell user to redirect to content server and login
      - #@ "CONTENT_URL=https://{content}.{domain_name}".format(content=data.values.domain.content,domain_name=data.values.domain.name)
      #!  for urls in email
      - #@ "CONTENT_SERVER_URL=https://{content}.{domain_name}".format(content=data.values.domain.content,domain_name=data.values.domain.name)

      #! introducde in  1.171.0 @2476a02ed only for audience in jwt no any request see mozilla/fxa@2476a02ed
      - #@ "SYNC_TOKENSERVER_URL=https://{sync}.{domain_name}/token".format(sync=data.values.domain.sync, domain_name=data.values.domain.name)  
      #!  lib/profile/client.js 
      #!  use for subhub delete cache , could be inner url 
      - #@ "PROFILE_SERVER_URL=https://{profile}.{domain_name}".format(profile=data.values.domain.profile,domain_name=data.values.domain.name)
      - #@ "FXA_OPENID_ISSUER=https://{content}.{domain_name}".format(content=data.values.domain.content,domain_name=data.values.domain.name)

      #!  convict -> url a valid url (need tld)
      - VERIFICATION_URL=http://browseridverifier.local:5050/v2
      #!  same as pushbox's
      - #@ "PUSHBOX_KEY={pushboxkey}".format(pushboxkey=data.values.secrets.pushboxkey)
      #!  convict -> url a valid url (need tld)
      - PUSHBOX_URL=http://pushbox.local:8002
      - PUSHBOX_ENABLED=true

      - CUSTOMS_SERVER_URL=none #! disable it

      #!  npm run gen-keys -> however if file exists will fail
      - FXA_OPENID_KEYFILE=config/key.json
      - FXA_OPENID_NEWKEYFILE=config/newKey.json
      - FXA_OPENID_OLDKEYFILE=config/oldKey.json


      #!  send mail via nodemailer to SMTP_HOST:SMTP_PORT
      #!  see auth-server/lib/senders/index.js -> line 25 config.smtp.
      #!   select_email_services.js ln 160 -> get mailer (self smtp server)
      #!  only those in EMAIL_SERVICE_FORCE_EMAIL_REGEX will use fxa-email-service
      #@ if data.values.mail.smtp_sender:
      - #@ "SMTP_SENDER={smtp_sender}".format(smtp_sender=data.values.mail.smtp_sender)
      #@ else:
      - #@ 'SMTP_SENDER=Firefox Accounts <no-reply@{domain_name}>'.format(domain_name=data.values.domain.name)
      #@ end

      #!  this for non-send-mail-just-check-code-in-log
      #@ if data.values.mail.type == "localhelper":
      - SMTP_HOST=fxa-auth-local-mail-helper
      - SMTP_PORT=9999
      #@ elif data.values.mail.type == "localrelay":
      #!  real send mail self hosting if your provider allow smtp/25
      - SMTP_HOST=exim-sender
      - SMTP_PORT=25
      #@ else:
      #!  3rd part stmp replay service
      - #@ "SMTP_HOST={smtp_host}".format(smtp_host = data.values.mail.smtp_host or assert.fail("mail.smtp_host is a must"))
      - #@ "SMTP_PORT={smtp_port}".format(smtp_port = data.values.mail.smtp_port or assert.fail("mail.smtp_port is a must"))
      #@ if data.values.mail.smtp_user:
      - #@ "SMTP_USER={smtp_user}".format(smtp_user = data.values.mail.smtp_user)
      #@ end
      #@ if data.values.mail.smtp_pass:
      - #@ "SMTP_PASS={smtp_pass}".format(smtp_pass = data.values.mail.smtp_pass)
      #@ end
      - #@ "SMTP_SECURE={smtp_secure}".format(smtp_secure = data.values.mail.smtp_secure if data.values.mail.smtp_secure else False)
      #@ end

      - GEODB_ENABLED=false

      - WAIT_HOSTS=redis:6379,fxa-auth-db-mysql:8000
      - WAIT_HOSTS_TIMEOUT=120
      - LOG_LEVEL=WARN
    #! from v1.173.0 docker iamge do not have publickey.json and other key relate json
    #! but it need openssl to  genrsa 2048  . so .... 
    #! it's not elegant but no better way to ....
    #! -m is important for passing ENVs 
    #! from v1.188.0 schema will not create/update by default . so we manually do this and ignore CREATE_MYSQL_SCHEMA
    command: sh -c "node scripts/gen_keys.js; node scripts/oauth_gen_keys.js ; node scripts/gen_vapid_keys.js  && /wait && node scripts/oauth-db-patcher.js && node bin/key_server.js"
    restart: unless-stopped

  #!  fxa-event-broker:
  #!    image: mozilla/fxa-event-broker
  #!    depends_on:
  #!      #!  - firestore
  #!      - pubsub
  #!      - goaws
  #!    environment:
  #!      - NODE_ENV=development #!  just another word to avoid prod/dev
  #!      - FIRESTORE_ENABLED=false
  #!      #!  - FIRESTORE_EMULATOR_HOST=http://firestore:9090
  #!      - PUBSUB_EMULATOR_HOST=http://pubsub:8085
  #!      - SERVICE_NOTIFICATION_QUEUE_URL=http://goaws:4100/serviceNotifications
  #!      #! goaws:4100 do not work beacuse hardcoded localhost:4100 in workerDev.js
  #!    command: sh -c "rm /app/config/development.json && node /app/dist/bin/workerDev.js"

  #!  fxa-profile-static and  fxa-profile-worker should share /var/public
  fxa-profile-static:
    image: #@ "mozilla/fxa-mono:{version}".format(version=data.values.fxa_version or "latest")
    working_dir: "/fxa/packages/fxa-profile-server"
    volumes:
      - #@ "{persistencepath}/public:/fxa/packages/fxa-profile-server/var/public/:ro".format(persistencepath=data.values.persistencepath)
    expose:
      - "1112"
    environment:
      - HOST=0.0.0.0
      - IMG=local
    command: ["node","bin/_static.js"]
    restart: unless-stopped

  fxa-profile-worker:
    #! just compute image and upload to aws/ local_public
    image: #@ "mozilla/fxa-mono:{version}".format(version=data.values.fxa_version or "latest")
    working_dir: "/fxa/packages/fxa-profile-server"
    volumes:
      #! cannot write? i'm app but folder:node
      - #@ "{persistencepath}/public:/fxa/packages/fxa-profile-server/var/public/".format(persistencepath=data.values.persistencepath)
    expose:
      - "1113"
    environment:
      - WORKER_HOST=0.0.0.0
      - IMG=local
    command: ["node","bin/worker.js"]
    restart: unless-stopped

  fxa-profile-server:
    image: #@ "mozilla/fxa-mono:{version}".format(version=data.values.fxa_version or "latest")
    working_dir: "/fxa/packages/fxa-profile-server"
    expose:
      - "1111"
    depends_on:
      - mysqldb
      - redis
    environment:
      - WAIT_HOSTS=mysqldb:3306,redis:6379 
      - WAIT_HOSTS_TIMEOUT=120
      #!  same as authserver profile PROFILE_SERVER_AUTH_SECRET_BEARER_TOKEN
      - #@ "AUTH_SECRET_BEARER_TOKEN={profileserver_authsecret_bearertoken}".format(profileserver_authsecret_bearertoken=data.values.secrets.profileserver_authsecret_bearertoken)
      #! we do not need sqs events
      - EVENTS_ENABLED=false

      - HOST=0.0.0.0
      - DB=mysql
      #! last $ need escape? yes
      - #@ "IMG_PROVIDERS_FXA=^https://{profile}.{domain_name}/img/a/[0-9a-f]{{32}}$$".format(profile=data.values.domain.profile , domain_name = data.values.domain.name)
      - #@ "IMG_URL=https://{profile}.{domain_name}/img/a/{{id}}".format(profile=data.values.domain.profile , domain_name = data.values.domain.name)
      - MYSQL_HOST=mysqldb
      #!  merge from fxa-profile-server/config/development.json
      - IMG=local
      #! prefer public url need v1?
      - #@ "AUTH_SERVER_URL=https://{auth}.{domain_name}/v1".format(auth=data.values.domain.auth, domain_name=data.values.domain.name)
      #! prefer public url need v1?
      - #@ "OAUTH_SERVER_URL=https://{oauth}.{domain_name}/v1".format(oauth=data.values.domain.oauth, domain_name=data.values.domain.name)
      - REDIS_HOST=redis

      - WORKER_URL=http://fxa-profile-worker:1113
      #! - PUBLIC_URL  -> but not used in code?
    #! command:  #! need wait for it
    volumes:
      - ./wait:/wait
      #! new added (because of npm preinstall is removed , so in docker images there's no /app/var/public , however it is not used ) 
      - #@ "{persistencepath}/public:/fxa/packages/fxa-profile-server/var/public/".format(persistencepath=data.values.persistencepath)
    command: sh -c "/wait && node bin/server.js"
    restart: unless-stopped

  fxa-content-server:
    image: #@ "mozilla/fxa-mono:{version}".format(version=data.values.fxa_version or "latest")
    working_dir: "/fxa/packages/fxa-content-server"
    expose:
      - "3030"
    depends_on:
      - fxa-auth-server
      - fxa-profile-server
      #! [TODO] wait redis
      - redis
    volumes:
      - ./_init/content/contentserver-prod.json:/fxa/packages/fxa-content-server/config/prod.json

    environment:
      - CONFIG_FILES=/fxa/packages/fxa-content-server/config/prod.json #!  load SCOPED_KEYS_VALIDATION for send
      - FXA_OAUTH_CLIENT_ID=ea3ca969f8c6bb0d #!  this is important!! maybe...
      #! same as auth-server 's
      - #@ "FLOW_ID_KEY={flowidkey}".format(flowidkey=data.values.secrets.flowidkey)
      - FEATURE_FLAGS_REDIS_HOST=redis
      #!  display in /.well-known/fxa-client-configuration -> sync_tokenserver_base_url
      #!  todo paring_server_base_uri is not right see github/mozilla/fxa-pairing-channel

      #!  i prefer publicurl 
      - #@ "SYNC_TOKENSERVER_URL=https://{sync}.{domain_name}/token".format(sync=data.values.domain.sync, domain_name=data.values.domain.name)  
      #!  we now use www represent for content
      - #@ "PUBLIC_URL=https://{content}.{domain_name}".format(content=data.values.domain.content, domain_name=data.values.domain.name)
      - #@ "FXA_OAUTH_URL=https://{oauth}.{domain_name}".format(oauth=data.values.domain.oauth, domain_name=data.values.domain.name)
      - #@ "FXA_URL=https://{auth}.{domain_name}".format(auth=data.values.domain.auth, domain_name=data.values.domain.name)
      - #@ "FXA_PROFILE_URL=https://{profile}.{domain_name}".format(profile=data.values.domain.profile, domain_name=data.values.domain.name)
      - #@ "FXA_PROFILE_IMAGES_URL=https://{profile}.{domain_name}".format(profile=data.values.domain.profile, domain_name=data.values.domain.name)

      #@ if data.values.option.channelserver.enable == True:
      - #@ "PAIRING_SERVER_BASE_URI=wss://{channelserver}.{domain_name}".format(channelserver=data.values.domain.channelserver, domain_name=data.values.domain.name)
      #@ end

      - FXA_MARKETING_EMAIL_ENABLED=false #!  no marketing

      - GEODB_ENABLED=false
      - LOG_LEVEL=WARN

      #!  for minify js and css
      - NODE_ENV=production
      - STATIC_DIRECTORY=dist
      - PAGE_TEMPLATE_SUBDIRECTORY=dist
      #!  may helpful?
      - CSP_ENABLED=true

      #@ if data.values.mail.type == "localhelper":
      - FXA_MX_RECORD_VALIDATION=false #! you can use any mail address whatever domain is if using localhelper
      #@ end

      #@ allowd_origins = []
      #@ if data.values.option.send.enable == True:
      #@ allowd_origins.append("https://{send}.{domain_name}".format(send=data.values.domain.send or assert.fail("domain.send is a must") , domain_name=data.values.domain.name) )
      #@ end
      #@ if len(allowd_origins) > 0:
      - #@ "ALLOWED_METRICS_FLOW_ORIGINS={}".format(",".join(allowd_origins))
      #@ end
      #!   oauth_client_id  <- so fxa-content-server (fxa settings) is a oauth?
      #!  client session secret
    command: ["node","server/bin/fxa-content-server.js"]
    restart: unless-stopped


  nginx:
  #!  [TODO] auto renew cert!
    image: nginx
    ports:
      #! [TODO] inner_listenr map to $INNER_LISTENER to nginx conf
      #! [TODO] syncserver && send 's WAIT_HOSTS need this too . so make a GLOBAL arg?
      -  #@ "{listener}:{inner_listenr}".format(listener=data.values.nginx.listener , inner_listenr = 443 if  data.values.nginx.ssl == True  else 80)
      #! - "443:443" #!  the real outer port
    depends_on:
      - fxa-auth-server
      - fxa-profile-server
      - syncserver #! cycle dependce? break via do not set SYNCSERVER_IDENTITY_PROVIDER
      #! nope! nginx need only this service's name resolvable (which resolvable when container is up)
      #! sync ->  depends on content(www)  -> depends nginx ->  sync up is enough
 
      - fxa-content-server
    #@ if data.values.option.send.enable == True:
      - send 
    #@ end    
    #@ if data.values.option.notes.enable == True or data.values.option.webext_storagesync.enable == True :
      - kinto 
    #@ end
    volumes:
      #!   resolver 127.0.0.11 valid=30s; => to allow up without depends ?
      #! ############## common parts #############
      #@ if data.values.nginx.ssl == True:
      #@ if data.values.nginx.certs.profile.cert and data.values.nginx.certs.profile.key : 
      - #@ "{}:/certs/profile.cer:ro".format(data.values.nginx.certs.profile.cert)
      - #@ "{}:/certs/profile.key:ro".format(data.values.nginx.certs.profile.key)
      #@ elif data.values.nginx.certs.wild.cert and data.values.nginx.certs.wild.key :
      - #@ "{}:/certs/profile.cer:ro".format(data.values.nginx.certs.wild.cert)
      - #@ "{}:/certs/profile.key:ro".format(data.values.nginx.certs.wild.key)
      #@ else :
      #@ assert.fail("NO CERT!!!")
      #@ end

      #@ if data.values.nginx.certs.auth.cert and data.values.nginx.certs.auth.key : 
      - #@ "{}:/certs/auth.cer:ro".format(data.values.nginx.certs.auth.cert)
      - #@ "{}:/certs/auth.key:ro".format(data.values.nginx.certs.auth.key)
      #@ elif data.values.nginx.certs.wild.cert and data.values.nginx.certs.wild.key :
      - #@ "{}:/certs/auth.cer:ro".format(data.values.nginx.certs.wild.cert)
      - #@ "{}:/certs/auth.key:ro".format(data.values.nginx.certs.wild.key)
      #@ else :
      #@ assert.fail("NO CERT!!!")
      #@ end

      #@ if data.values.nginx.certs.oauth.cert and data.values.nginx.certs.oauth.key : 
      - #@ "{}:/certs/oauth.cer:ro".format(data.values.nginx.certs.oauth.cert)
      - #@ "{}:/certs/oauth.key:ro".format(data.values.nginx.certs.oauth.key)
      #@ elif data.values.nginx.certs.wild.cert and data.values.nginx.certs.wild.key :
      - #@ "{}:/certs/oauth.cer:ro".format(data.values.nginx.certs.wild.cert)
      - #@ "{}:/certs/oauth.key:ro".format(data.values.nginx.certs.wild.key)
      #@ else :
      #@ assert.fail("NO CERT!!!")
      #@ end

      #@ if data.values.nginx.certs.sync.cert and data.values.nginx.certs.sync.key : 
      - #@ "{}:/certs/sync.cer:ro".format(data.values.nginx.certs.sync.cert)
      - #@ "{}:/certs/sync.key:ro".format(data.values.nginx.certs.sync.key)
      #@ elif data.values.nginx.certs.wild.cert and data.values.nginx.certs.wild.key :
      - #@ "{}:/certs/sync.cer:ro".format(data.values.nginx.certs.wild.cert)
      - #@ "{}:/certs/sync.key:ro".format(data.values.nginx.certs.wild.key)
      #@ else :
      #@ assert.fail("NO CERT!!!")
      #@ end

      #@ if data.values.nginx.certs.content.cert and data.values.nginx.certs.content.key : 
      - #@ "{}:/certs/content.cer:ro".format(data.values.nginx.certs.content.cert)
      - #@ "{}:/certs/content.key:ro".format(data.values.nginx.certs.content.key)
      #@ elif data.values.nginx.certs.wild.cert and data.values.nginx.certs.wild.key :
      - #@ "{}:/certs/content.cer:ro".format(data.values.nginx.certs.wild.cert)
      - #@ "{}:/certs/content.key:ro".format(data.values.nginx.certs.wild.key)
      #@ else :
      #@ assert.fail("NO CERT!!!")
      #@ end
      - ./_init/nginx/fxa.conf.tmpl:/etc/nginx/conf.d/fxa.conf.tmpl:ro
      #@ else:
      - ./_init/nginx/fxa_nossl.conf.tmpl:/etc/nginx/conf.d/fxa.conf.tmpl:ro
      #@ end

      #! ############## channelserver parts #############
      #@ if data.values.option.channelserver.enable == True:
      #@ if data.values.nginx.ssl == True:
      #@ if data.values.nginx.certs.channelserver.cert and data.values.nginx.certs.channelserver.key:
      - #@ "{}:/certs/channelserver.cer:ro".format(data.values.nginx.certs.channelserver.cert)
      - #@ "{}:/certs/channelserver.key:ro".format(data.values.nginx.certs.channelserver.key)
      #@ elif data.values.nginx.certs.wild.cert and data.values.nginx.certs.wild.key :
      - #@ "{}:/certs/channelserver.cer:ro".format(data.values.nginx.certs.wild.cert)
      - #@ "{}:/certs/channelserver.key:ro".format(data.values.nginx.certs.wild.key)
      #@ else :
      #@ assert.fail("NO CERT!!!")
      #@ end
      - ./_init/nginx/channelserver.conf.tmpl:/etc/nginx/conf.d/channelserver.conf.tmpl:ro
      #@ else:
      #! ssl false
      - ./_init/nginx/channelserver_nossl.conf.tmpl:/etc/nginx/conf.d/channelserver.conf.tmpl:ro
      #@ end
      #@ end


      #! ############## send parts #############
      #@ if data.values.option.send.enable == True:
      #@ if data.values.nginx.ssl == True:
      #@ if data.values.nginx.certs.send.cert and data.values.nginx.certs.send.key : 
      - #@ "{}:/certs/send.cer:ro".format(data.values.nginx.certs.send.cert)
      - #@ "{}:/certs/send.key:ro".format(data.values.nginx.certs.send.key)
      #@ elif data.values.nginx.certs.wild.cert and data.values.nginx.certs.wild.key :
      - #@ "{}:/certs/send.cer:ro".format(data.values.nginx.certs.wild.cert)
      - #@ "{}:/certs/send.key:ro".format(data.values.nginx.certs.wild.key)
      #@ else :
      #@ assert.fail("NO CERT!!!")
      #@ end
      - ./_init/nginx/send.conf.tmpl:/etc/nginx/conf.d/send.conf.tmpl:ro
      #@ else:
      #! ssl false 
      - ./_init/nginx/send_nossl.conf.tmpl:/etc/nginx/conf.d/send.conf.tmpl:ro
      #@ end
      #@ end

      #! ############## kinto parts #############
      #@ if data.values.option.notes.enable == True or data.values.option.webext_storagesync.enable == True:
      #@ if data.values.nginx.ssl == True:
      #@ if data.values.nginx.certs.kinto.cert and data.values.nginx.certs.kinto.key : 
      - #@ "{}:/certs/kinto.cer:ro".format(data.values.nginx.certs.kinto.cert)
      - #@ "{}:/certs/kinto.key:ro".format(data.values.nginx.certs.kinto.key)
      #@ elif data.values.nginx.certs.wild.cert and data.values.nginx.certs.wild.key :
      - #@ "{}:/certs/kinto.cer:ro".format(data.values.nginx.certs.wild.cert)
      - #@ "{}:/certs/kinto.key:ro".format(data.values.nginx.certs.wild.key)
      #@ else :
      #@ assert.fail("NO CERT!!!")
      #@ end
      - ./_init/nginx/kinto.conf.tmpl:/etc/nginx/conf.d/kinto.conf.tmpl:ro
      #@ else:
      #! ssl false 
      - ./_init/nginx/kinto_nossl.conf.tmpl:/etc/nginx/conf.d/kinto.conf.tmpl:ro
      #@ end
      #@ end

    environment:
      #!  for replacement in fxa.conf.tmpl
      - #@ "NGINX_DOMAIN_NAME={domain_name}".format(domain_name=data.values.domain.name)
      - #@ "CONTENT={content}".format(content=data.values.domain.content)
      - #@ "AUTH={auth}".format(auth=data.values.domain.auth)
      - #@ "OAUTH={oauth}".format(oauth=data.values.domain.oauth)
      - #@ "PROFILE={profile}".format(profile=data.values.domain.profile)
      - #@ "SYNC={sync}".format(sync=data.values.domain.sync)

      #@ if data.values.option.channelserver.enable == True:
      - #@ "CHANNELSERVER={channelserver}".format(channelserver=data.values.domain.channelserver or assert.fail("domain.channelserver is a must"))
      #@ end

      #@ if data.values.option.send.enable == True:
      - #@ "SEND={send}".format(send=data.values.domain.send or assert.fail("domain.send is a must"))
      #@ end

      #@ if data.values.option.notes.enable == True or data.values.option.webext_storagesync.enable == True:
      - #@ "KINTO={kinto}".format(kinto=data.values.domain.kinto or assert.fail("domain.kinto is a must"))
      #@ end
      


    #@ if data.values.debug.deps_logs == False:
    logging: #!  do not show logs
      driver: "json-file"
    #@ end
    #! use envsubst only replace domain name https://github.com/docker-library/docs/issues/496#! issuecomment-186149231
    #! build command!
    #@ command = []
    #@ command.append('/bin/sh -c ' + '"'  + "envsubst '$$NGINX_DOMAIN_NAME $$CONTENT $$AUTH $$OAUTH $$PROFILE $$SYNC' < /etc/nginx/conf.d/fxa.conf.tmpl > /etc/nginx/conf.d/fxa.conf ") 
    #@ if data.values.option.channelserver.enable == True:
    #@ command.append("envsubst '$$NGINX_DOMAIN_NAME $$CHANNELSERVER' < /etc/nginx/conf.d/channelserver.conf.tmpl > /etc/nginx/conf.d/channelserver.conf ")
    #@ end
    #@ if data.values.option.send.enable == True:
    #@ command.append("envsubst '$$NGINX_DOMAIN_NAME $$SEND' < /etc/nginx/conf.d/send.conf.tmpl > /etc/nginx/conf.d/send.conf ")
    #@ end
    #@ if data.values.option.notes.enable == True or data.values.option.webext_storagesync.enable == True:
    #@ command.append("envsubst '$$NGINX_DOMAIN_NAME $$KINTO' < /etc/nginx/conf.d/kinto.conf.tmpl > /etc/nginx/conf.d/kinto.conf ")
    #@ end
    #@ command.append("nginx -g 'daemon off;'" + '"')
    command:  #@ "&& ".join(command)
    restart: unless-stopped

#@ if data.values.option.channelserver.enable == True:
  channelserver:
    image: mozilla/channelserver:latest
    expose:
      - "8000"
    restart: unless-stopped
#@ end


#@ if data.values.option.send.enable == True:
  send:
    #! [TODO] TMP_DIR?
    image: mozilla/send
    depends_on:
      #! [TODO] wait send-redis
      - send-redis
      #! see https://github.com/mozilla/send server/fxa.js -> depends on content server too (same as syncserver)
      #! [TODO] wait nginx and fxa-content-server
      - fxa-content-server
    environment:
      - #@ "FXA_URL=https://{content}.{domain_name}".format(content=data.values.domain.content, domain_name=data.values.domain.name)
      - #@ "BASE_URL=https://{send}.{domain_name}".format(send=data.values.domain.send or assert.fail("domain.send is a must") , domain_name=data.values.domain.name)
      - #@ "FXA_CSP_CONTENT_URL=https://{content}.{domain_name}".format(content=data.values.domain.content, domain_name=data.values.domain.name)
      - #@ "FXA_CSP_OAUTH_URL=https://{oauth}.{domain_name}".format(oauth=data.values.domain.oauth, domain_name=data.values.domain.name)
      - #@ "FXA_CSP_PROFILE_URL=https://{profile}.{domain_name}".format(profile=data.values.domain.profile, domain_name=data.values.domain.name)
      - #@ "FXA_CSP_PROFILEIMAGE_URL=https://{profile}.{domain_name}".format(profile=data.values.domain.profile, domain_name=data.values.domain.name) 
      #@ settings = struct.decode(data.values.option.send.settings)
      #@ for key in settings:
      #@ if  settings.get(key):
      - #@ "{key}={val}".format(key=key.upper(), val= settings.get(key))
      #@ end
      #@ end
      #! else url protocol of file depends on NODE_ENV to be http/https
      - NODE_ENV=production
      - REDIS_HOST=send-redis
    restart: unless-stopped
  send-redis: #! used by send
    image: redis
    expose:
      - "6379"
    #@ if data.values.debug.deps_logs == False:
    logging: #!  do not show logs
      driver: "json-file"
    #@ end
#@ end

#@ if data.values.option.notes.enable == True or data.values.option.webext_storagesync.enable == True:
  kinto:
    image: #@ "kinto/kinto-server:{version}".format(version=data.values.option.kinto_version or "latest")
    depends_on:
      - postgresdb
    expose:
      - "8888"
    environment:
      - WAIT_HOSTS=postgresdb:5432
      - WAIT_HOSTS_TIMEOUT=120
      - PORT=8888
      - KINTO_STORAGE_BACKEND=kinto.core.storage.postgresql
      - KINTO_STORAGE_URL=postgresql://postgres:postgres@postgresdb/postgres
      - KINTO_CACHE_BACKEND=kinto.core.cache.postgresql
      - KINTO_CACHE_URL=postgresql://postgres:postgres@postgresdb/postgres
      #! permission backend is necessary
      - KINTO_PERMISSION_BACKEND=kinto.core.permission.postgresql
      - KINTO_PERMISSION_URL=postgresql://postgres:postgres@postgresdb/postgres

      #! read_env do not work for this ? => no , if .ini defined a KEY than the VALUE can be overrided in ENV
      #! kinto-fxa replace "-"-> "_" and "." -> "_" see kinto/core/utils.py-> read_env

      - #@ "FXA_OAUTH_OAUTH_URI=https://{oauth}.{domain_name}/v1".format(oauth=data.values.domain.oauth, domain_name=data.values.domain.name)

      #! #### note config
      #@ if data.values.option.notes.enable == True:
      #@ client_ids = []
      #@ if data.values.option.notes.settings.client_id.webext:
      #@ client_ids.append(data.values.option.notes.settings.client_id.webext)
      #@ end
      #@ if data.values.option.notes.settings.client_id.android:
      #@ client_ids.append(data.values.option.notes.settings.client_id.android)
      #@ end
      - #@ "FXA_OAUTH_CLIENTS_NOTES_CLIENT_ID={val}".format(val= " ".join(client_ids) )  
      #@ end

      #@ if data.values.option.webext_storagesync.enable == True:
      - #@ "FXA_OAUTH_CLIENTS_STORAGESYNC_CLIENT_ID={val}".format(val= data.values.option.webext_storagesync.settings.client_id or assert.fail("webext_storagesync client_id is a must") )
      #@ end

      #! [deprecated]
      #! #### note config
      #! #@ notes_settings = struct.decode(data.values.option.notes.settings)
      #! #@ for key in notes_settings:
      #! #@ if  notes_settings.get(key):
      #! - #@ "{key}={val}".format(key=key.upper().replace(".","_").replace("-","_"), val= notes_settings.get(key))
      #! #@ end
      #! #@ end
      #! [deprecated]
      #! #### webextension.storage.sync config
      #! #@ webext_storagesync_settings = struct.decode(data.values.option.webext_storagesync.settings)
      #! #@ for key in webext_storagesync_settings:
      #! #@ if  webext_storagesync_settings.get(key):
      #! - #@ "{key}={val}".format(key=key.upper().replace(".","_").replace("-","_"), val= webext_storagesync_settings.get(key))
      #! #@ end
      #! #@ end

    volumes:
      - ./wait:/wait
      - ./_init/kinto/kinto.ini:/etc/kinto/kinto.ini
    command: sh -c "pip install kinto-fxa && /wait && kinto migrate --ini $$KINTO_INI && kinto start --ini $$KINTO_INI --port $$PORT"
    restart: unless-stopped

  postgresdb:
    image: postgres
    expose:
      - "5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - #@ "{persistencepath}/postgres_data:/var/lib/postgresql/data".format(persistencepath=data.values.persistencepath)
    #@ if data.values.debug.deps_logs == False:
    logging: #!  do not show logs
      driver: "json-file"
    #@ end
    restart: unless-stopped
#@ end

#! write a .sh
#!  create db folder , create public folder (chmod a+w public)
#!  get https://github.com/ufoscout/docker-compose-wait/releases/download/2.7.3/wait
#!  cert and nginx conf with domain
#!  after cert expire , docker-compose exec nginx -s reload or just restart it?
#!  or use cloudflare which could ignore expired cert?


#!  todo all events
#!  todo auth -> prod , but snsTopicEndpoint needs dev!!!
#!  remove auth's dev.json unused.

#! issue 1. covinct valid url for pushbox and browser-verify 
#!           -> docker-compose network alias may help
#! issue 2 .geodata with proxy_pass 127.0.0.1?
#! issue 3. is fxa-event-broker necessary for self hosting?
#!          -> No

#! this is no need
#! #!  auth ->(send)-> sqs ->(get) -> event-broker -> reply party(3rd)

#! #!  auth -> sns(via topic to all counsumer) 
#!                  -> sync-tokenserver script:process_account_evnet.py (may need manual run and config) 
#!                       ( delete / reset / passwordChange)
#!                  -> pushbox (delete[which is account] / device:delete)  
#!                  -> profile (delete primaryEmailChanged profileDataChanged)
#!                  ?-> content?
#!  profile use fxa-notifier-aws which cannot set endpoint
#!  tokenserver cannot set endpoint too 
#!  what if we set goaws -> us-east-1.amazonaws.com //
#! 
#!  pushbox can change . but consume too slow and not necessary
#!  so append it on your own risk
#!  for pushbox 
#!  add
#!    fxa-auth-server 
#!      environment:
#!        - NODE_ENV=dev #!  to enable SNS_TOPIC_ENDPOINT
#!        - SNS_TOPIC_ENDPOINT=http://goaws:4100/
#!        - SNS_TOPIC_ARN=arn:aws:sns:local-01:000000000000:local-topic1
#!  add
#!      pushbox.local
#!        environment:
#!          - AWS_LOCAL_SQS=http://goaws:4100 #!  this sqs is for get message of device/account delete to delete these device/account unused messages.
#!          - ROCKET_SQS_URL="http://goaws:4100/100010001000/local-queue3" #!  #!  local-queue3 is under local-topic1 define by goaws/goaws.yaml
#!          - WAIT_HOSTS=mysqldb:3306,goaws:4100
#!  add
#!      goaws: #! used by fxa-event-broker fxa-auth-server push.local
#!        image: pafortin/goaws
#!        expose:
#!          - "4100"
#!        logging:
#!          driver: "none"
#!       
#! 

#! 
#!  #!  if you want to use set fxa-auth-server MEMCACHE_METRICS_CONTEXT_ADDRESS=memecahced:11211
#!  memcached: #! used by fxa-auth-server fxa-customs-server
#!  #! used as auth's metric and custom #!  so not necessary
#!    image: memcached
#!    expose:
#!      - "11211"
#!    logging:
#!      driver: "none"


